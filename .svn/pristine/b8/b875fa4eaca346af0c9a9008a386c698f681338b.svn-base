import BaseComponent from "./BaseComponent";
import { Wzhcq_StorageName, AudioName } from "./Enum";
import { Utils } from "./Utils";

const { ccclass, property } = cc._decorator;

@ccclass
export default class AudioManager extends BaseComponent {

    public static instance: AudioManager = null;

    //背景音乐
    @property(cc.AudioSource)
    public Wzhcq_AudioBG: cc.AudioSource = null;

    //点击
    @property(cc.AudioSource)
    public Wzhcq_AudioBtn_Click: cc.AudioSource = null;

    //移动
    @property(cc.AudioSource)
    public Wzhcq_AudioTouchMove: cc.AudioSource = null;

    @property(cc.AudioSource)
    public Wzhcq_AudioXiaoChu: cc.AudioSource = null;

    @property(cc.AudioSource)
    public Wzhcq_AudioWin: cc.AudioSource = null;

    @property(cc.AudioSource)
    public Wzhcq_AudioLose: cc.AudioSource = null;

    @property(cc.AudioSource)
    public Wzhcq_AudioXiaoPai: cc.AudioSource = null;
    
    Wzhcq_bgCurrent_audio: any;

    protected onLoad(): void {
        AudioManager.instance = this;

        this.EventMgr.on(this.EventMgr.Wzhcq_EVENT_NAMES.Wzhcq_UPDATE_MUSIC, this.Wzhcq_updateMusic, this);
        this.EventMgr.on(this.EventMgr.Wzhcq_EVENT_NAMES.Wzhcq_UPDATE_EFFECT, this.Wzhcq_updateEffect, this);
    }

    playBgMusic() {
        this.Wzhcq_AudioBG.loop = true; // 循环播放,注意一下位置
        this.Wzhcq_AudioBG.mute = false; // 设置静音
        console.log(this.Wzhcq_AudioBG.isPlaying); // 是否正在播放
        // this.audio.play();
        this.Wzhcq_AudioBG.play();
    }

    stopBgMusic() {
        this.Wzhcq_AudioBG.stop();
    }

    playAudioBtn_Click() {
        let Wzhcq_isEffect = Utils.getInstance.Wzhcq_getItem(Wzhcq_StorageName.Wzhcq_Effect);
        if (Wzhcq_isEffect) {
            this.Wzhcq_AudioBtn_Click.play();
        }
    }

    playAudioTouchMove() {
        let Wzhcq_isEffect = Utils.getInstance.Wzhcq_getItem(Wzhcq_StorageName.Wzhcq_Effect);
        if (Wzhcq_isEffect) {
            this.Wzhcq_AudioTouchMove.play();
        }
    }

    playAudioXiaoChu() {
        let isEffect = Utils.getInstance.Wzhcq_getItem(Wzhcq_StorageName.Wzhcq_Effect);
        if (isEffect) {
            this.Wzhcq_AudioXiaoChu.play();
        }
    }

    playAudioWin() {
        let Wzhcq_isEffect = Utils.getInstance.Wzhcq_getItem(Wzhcq_StorageName.Wzhcq_Effect);
        if (Wzhcq_isEffect) {
            this.Wzhcq_AudioWin.play();
        }
    }

    playAudioLose() {
        let Wzhcq_isEffect = Utils.getInstance.Wzhcq_getItem(Wzhcq_StorageName.Wzhcq_Effect);
        if (Wzhcq_isEffect) {
            this.Wzhcq_AudioLose.play();
        }
    }

    playAudioXiaoPai() {
        let Wzhcq_isEffect = Utils.getInstance.Wzhcq_getItem(Wzhcq_StorageName.Wzhcq_Effect);
        if (Wzhcq_isEffect) {
            this.Wzhcq_AudioXiaoPai.play();
        }
    }
    
    Wzhcq_updateMusic(Wzhcq_volume:any) {
        this.Wzhcq_AudioBG.volume = Wzhcq_volume;
    }

    Wzhcq_updateEffect(Wzhcq_volume:any) {
        this.Wzhcq_AudioBtn_Click.volume = Wzhcq_volume;
        this.Wzhcq_AudioTouchMove.volume = Wzhcq_volume;
        this.Wzhcq_AudioXiaoChu.volume = Wzhcq_volume;
    }
}
