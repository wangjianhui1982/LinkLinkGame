
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/RankItem.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'dd553fmL+BGfJ9idSJ4ApIP', 'RankItem');
// Script/RankItem.js

"use strict";

cc.Class({
  "extends": cc.Component,
  name: "RankItem",
  properties: {
    rankLabel: cc.Label,
    avatarImgSprite: cc.Sprite,
    icon_rank: cc.Sprite,
    iconSpriteFrame: {
      "default": [],
      type: cc.SpriteFrame
    },
    nickLabel: cc.Label,
    topScoreLabel: cc.Label,
    levelLabel: cc.Label
  },
  start: function start() {},
  init: function init(rank, data) {
    var avatarUrl = data.avatarUrl; // let nick = data.nickname.length <= 10 ? data.nickname : data.nickname.substr(0, 10) + "...";

    var nick = data.nickname;
    var score = 0;

    if (data.KVDataList.length != 0) {
      if (JSON.parse(data.KVDataList[0].value).score == undefined) {
        score = 0;
      } else {
        score = JSON.parse(data.KVDataList[0].value).score;
      }
    } else {
      score = 0;
    }

    var level = 0;

    if (data.KVDataList.length != 0) {
      if (JSON.parse(data.KVDataList[0].value).level == undefined) {
        level = 0;
      } else {
        level = JSON.parse(data.KVDataList[0].value).level;
      }
    } else {
      level = 0;
    }

    if (rank < 3) {
      this.icon_rank.node.active = true;
      this.icon_rank.spriteFrame = this.iconSpriteFrame[rank];
      this.rankLabel.node.active = false;
    } else {
      this.icon_rank.node.active = false;
      this.rankLabel.node.active = true;
      this.rankLabel.string = 0 == rank ? "100+" : rank + 1 + "";
    }

    if ("" !== avatarUrl) {
      this.createImage(avatarUrl);
    }

    this.nickLabel.string = nick;
    this.topScoreLabel.string = score;
    this.levelLabel.string = level;
  },
  createImage: function createImage(avatarUrl) {
    var _this = this;

    cc.assetManager.loadRemote(avatarUrl, {
      ext: '.jpg'
    }, function (err, texture) {
      _this.avatarImgSprite.spriteFrame = new cc.SpriteFrame(texture);
    });
  }
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFxSYW5rSXRlbS5qcyJdLCJuYW1lcyI6WyJjYyIsIkNsYXNzIiwiQ29tcG9uZW50IiwibmFtZSIsInByb3BlcnRpZXMiLCJyYW5rTGFiZWwiLCJMYWJlbCIsImF2YXRhckltZ1Nwcml0ZSIsIlNwcml0ZSIsImljb25fcmFuayIsImljb25TcHJpdGVGcmFtZSIsInR5cGUiLCJTcHJpdGVGcmFtZSIsIm5pY2tMYWJlbCIsInRvcFNjb3JlTGFiZWwiLCJsZXZlbExhYmVsIiwic3RhcnQiLCJpbml0IiwicmFuayIsImRhdGEiLCJhdmF0YXJVcmwiLCJuaWNrIiwibmlja25hbWUiLCJzY29yZSIsIktWRGF0YUxpc3QiLCJsZW5ndGgiLCJKU09OIiwicGFyc2UiLCJ2YWx1ZSIsInVuZGVmaW5lZCIsImxldmVsIiwibm9kZSIsImFjdGl2ZSIsInNwcml0ZUZyYW1lIiwic3RyaW5nIiwiY3JlYXRlSW1hZ2UiLCJhc3NldE1hbmFnZXIiLCJsb2FkUmVtb3RlIiwiZXh0IiwiZXJyIiwidGV4dHVyZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQUEsRUFBRSxDQUFDQyxLQUFILENBQVM7RUFDTCxXQUFTRCxFQUFFLENBQUNFLFNBRFA7RUFFTEMsSUFBSSxFQUFFLFVBRkQ7RUFHTEMsVUFBVSxFQUFFO0lBQ1JDLFNBQVMsRUFBRUwsRUFBRSxDQUFDTSxLQUROO0lBRVJDLGVBQWUsRUFBRVAsRUFBRSxDQUFDUSxNQUZaO0lBSVJDLFNBQVMsRUFBRVQsRUFBRSxDQUFDUSxNQUpOO0lBTVJFLGVBQWUsRUFBRTtNQUNiLFdBQVMsRUFESTtNQUViQyxJQUFJLEVBQUVYLEVBQUUsQ0FBQ1k7SUFGSSxDQU5UO0lBV1JDLFNBQVMsRUFBRWIsRUFBRSxDQUFDTSxLQVhOO0lBWVJRLGFBQWEsRUFBRWQsRUFBRSxDQUFDTSxLQVpWO0lBYVJTLFVBQVUsRUFBRWYsRUFBRSxDQUFDTTtFQWJQLENBSFA7RUFrQkxVLEtBbEJLLG1CQWtCRyxDQUVQ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dXJjZXNDb250ZW50IjpbImNjLkNsYXNzKHtcbiAgICBleHRlbmRzOiBjYy5Db21wb25lbnQsXG4gICAgbmFtZTogXCJSYW5rSXRlbVwiLFxuICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgcmFua0xhYmVsOiBjYy5MYWJlbCxcbiAgICAgICAgYXZhdGFySW1nU3ByaXRlOiBjYy5TcHJpdGUsXG5cbiAgICAgICAgaWNvbl9yYW5rOiBjYy5TcHJpdGUsXG5cbiAgICAgICAgaWNvblNwcml0ZUZyYW1lOiB7XG4gICAgICAgICAgICBkZWZhdWx0OiBbXSxcbiAgICAgICAgICAgIHR5cGU6IGNjLlNwcml0ZUZyYW1lXG4gICAgICAgIH0sXG5cbiAgICAgICAgbmlja0xhYmVsOiBjYy5MYWJlbCxcbiAgICAgICAgdG9wU2NvcmVMYWJlbDogY2MuTGFiZWwsXG4gICAgICAgIGxldmVsTGFiZWw6IGNjLkxhYmVsLFxuICAgIH0sXG4gICAgc3RhcnQoKSB7XG5cbiAgICB9LFxuXG4gICAgaW5pdDogZnVuY3Rpb24gKHJhbmssIGRhdGEpIHtcbiAgICAgICAgbGV0IGF2YXRhclVybCA9IGRhdGEuYXZhdGFyVXJsO1xuICAgICAgICAvLyBsZXQgbmljayA9IGRhdGEubmlja25hbWUubGVuZ3RoIDw9IDEwID8gZGF0YS5uaWNrbmFtZSA6IGRhdGEubmlja25hbWUuc3Vic3RyKDAsIDEwKSArIFwiLi4uXCI7XG4gICAgICAgIGxldCBuaWNrID0gZGF0YS5uaWNrbmFtZTtcbiAgICAgICAgXG4gICAgICAgIGxldCBzY29yZSA9IDA7XG4gICAgICAgIGlmIChkYXRhLktWRGF0YUxpc3QubGVuZ3RoICE9IDApIHtcbiAgICAgICAgICAgIGlmIChKU09OLnBhcnNlKGRhdGEuS1ZEYXRhTGlzdFswXS52YWx1ZSkuc2NvcmUgPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgc2NvcmUgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgc2NvcmUgPSBKU09OLnBhcnNlKGRhdGEuS1ZEYXRhTGlzdFswXS52YWx1ZSkuc2NvcmU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzY29yZSA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGxldmVsID0gMDtcbiAgICAgICAgaWYgKGRhdGEuS1ZEYXRhTGlzdC5sZW5ndGggIT0gMCkge1xuICAgICAgICAgICAgaWYgKEpTT04ucGFyc2UoZGF0YS5LVkRhdGFMaXN0WzBdLnZhbHVlKS5sZXZlbCA9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBsZXZlbCA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBsZXZlbCA9IEpTT04ucGFyc2UoZGF0YS5LVkRhdGFMaXN0WzBdLnZhbHVlKS5sZXZlbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGxldmVsID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChyYW5rIDwgMykge1xuICAgICAgICAgICAgdGhpcy5pY29uX3Jhbmsubm9kZS5hY3RpdmUgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5pY29uX3Jhbmsuc3ByaXRlRnJhbWUgPSB0aGlzLmljb25TcHJpdGVGcmFtZVtyYW5rXTtcbiAgICAgICAgICAgIHRoaXMucmFua0xhYmVsLm5vZGUuYWN0aXZlID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmljb25fcmFuay5ub2RlLmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5yYW5rTGFiZWwubm9kZS5hY3RpdmUgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5yYW5rTGFiZWwuc3RyaW5nID0gMCA9PSByYW5rID8gXCIxMDArXCIgOiAocmFuayArIDEpICsgXCJcIjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoXCJcIiAhPT0gYXZhdGFyVXJsKSB7XG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUltYWdlKGF2YXRhclVybCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5uaWNrTGFiZWwuc3RyaW5nID0gbmljaztcbiAgICAgICAgdGhpcy50b3BTY29yZUxhYmVsLnN0cmluZyA9IHNjb3JlO1xuICAgICAgICB0aGlzLmxldmVsTGFiZWwuc3RyaW5nID0gbGV2ZWw7XG4gICAgfSxcbiAgICBjcmVhdGVJbWFnZShhdmF0YXJVcmwpIHtcbiAgICAgICAgY2MuYXNzZXRNYW5hZ2VyLmxvYWRSZW1vdGUoYXZhdGFyVXJsLCB7IGV4dDogJy5qcGcnIH0sIChlcnIsIHRleHR1cmUpID0+IHtcbiAgICAgICAgICAgIHRoaXMuYXZhdGFySW1nU3ByaXRlLnNwcml0ZUZyYW1lID0gbmV3IGNjLlNwcml0ZUZyYW1lKHRleHR1cmUpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbn0pO1xuIl19